var configuration = {
    type: Phaser.AUTO,
    pixelArt : true,
    width : 600,
    height : 600,
    //backgroundColor : '#FFFFFF',
    scene:{
        preload : preload,
        create : create,
        update : update
    },
    physics :{
        default : 'arcade',
        arcade :{
                    debug : true,
                    gravity : {y : 500}
                }
    }
}
var game = new Phaser.Game(configuration);
var timedEvent; //timer qui desactive les touches
var timeResetCount; //timer qui reset attackCount
var allEntry;
var touchesAction;
var touchesDirection; //touches clavier
var attackCount; //compteur
var ontheGround; // indique si le personnage est au sol

function preload(){
    this.load.image('sky','assets/cloud.png');
    this.load.image('ground','assets/solPave.png');
    this.load.spritesheet('hero', 'assets/heroidleright.png',{frameWidth: 100, frameHeight: 100});
    this.load.spritesheet('heroAttack', 'assets/herocomboright.png',{frameWidth: 100, frameHeight: 100});
    this.load.spritesheet('herorun', 'assets/herorunright.png',{frameWidth: 100, frameHeight: 100});

}

function create(){
    var skyBg = this.add.image(200, 400,'sky');
    skyBg.setScale(3)
    var sol1 = this.add.sprite(200, 570, 'ground'); //image sol
    sol1.setScale(3)
    player = this.physics.add.sprite(200, 200,'hero'); // player
    player.setScale(3);
    player.body.setSize(16, 40)
    ontheGround = true;

    attackCount = 0;
    touchesAction = this.input.keyboard.addKeys('Z,Q,S,D');
    touchesDirection = this.input.keyboard.createCursorKeys();//gestion touches de direction clavier
    text = this.add.text(32, 32 ,"koukou",{ color: '#0066CC' }); //champ texte

        var platform = this.physics.add.staticGroup();  //dÃ©finit la valeur d'une plateforme
        platform.add(sol1)                              //asigne
        this.physics.add.collider(platform,player)      //collision entre la plateforrme et le joueur 
        

        //animation set
        this.anims.create({
            key: 'idle',
            frames: this.anims.generateFrameNumbers('hero',{frames: [0, 1, 2, 3]}),
            frameRate: 4,
            repeat: -1
        })
        this.anims.create({
            key: 'runRight',
            frames: this.anims.generateFrameNumbers('herorun',{frames: [0, 1, 2, 3]}),
            frameRate: 8,
            repeat: -1
        })
        this.anims.create({
            key: 'attackOne',
            frames: this.anims.generateFrameNumbers('heroAttack',{frames: [0, 1, 2, 3, 4, 5]}),
            frameRate: 14,
            //repeat: -1
        })
        this.anims.create({
            key: 'attackTwo',
            frames: this.anims.generateFrameNumbers('heroAttack',{frames: [6, 7, 8, 9, 10]}),
            frameRate: 13,
            //repeat: -1
        })
        this.anims.create({
            key: 'attackThree',
            frames: this.anims.generateFrameNumbers('heroAttack',{frames: [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]}),
            frameRate: 12,
            //repeat: -1
        })

        player.play('idle');

        allEntry = this.input.keyboard.on('keydown-D', () => {
            timedEvent = new Phaser.Time.TimerEvent({ delay: 300 , callback : yes, loop : false});
            //timeResetCount = new Phaser.Time.TimerEvent({ delay: 400 , callback : resetCount, loop : false});
            //this.time.addEvent(timeResetCount);
            ontheGround = false;
            this.time.addEvent(timedEvent);
            allEntry.enabled = false;
            console.log("pouetpouet");
        },this);


        
        
        this.input.keyboard.on('keydown-D', () => {
        // touchesAction = this.input.keyboard.on(touchesAction.D, () => {
            //timedEvent = new Phaser.Time.TimerEvent({ delay: 600 , callback : player.play('idle'), loop : false});
            // this.time.addEvent(timedEvent);
            //if(attackCount <= 0){player.play('idle');}
            if(attackCount == 0){attackNumberOne();}
            if(attackCount == 1){attackNumberTwo();}
            if(attackCount == 2){attackNumberthree();}
            if(attackCount > 2){resetCount()}
            
        }, this);

}

function yes(){
        console.log('fdp');
        allEntry.enabled = true;
        player.setVelocityX(0);
        attackCount++;
        ontheGround = true;
        //player.play('idle')
        timedEvent.remove();
}
function resetCount(){
    //attackCount = attackCount - attackCount ;
    console.log("reset : "+attackCount);
}

function playerIdle(){
    player.play('idle')
}
function attackNumberOne(){
            player.setVelocityX(60)
            player.play('attackOne');
    player.on('animationcomplete', ()=>{
        attackCount = 1;        
        console.log('pd');
        player.play('idle')        
    },this);
}
function attackNumberTwo(){
    player.setVelocityX(100)
    player.play('attackTwo');
player.on('animationcomplete', ()=>{
        attackCount = 2;        
        console.log('enculax');      
},this);
}
function attackNumberthree(){
            player.setVelocityX(150)
            player.play('attackThree');
    player.on('animationcomplete', ()=>{
        attackCount = 0;        
    },this);
}

function update(time, delta){
    
    console.log(attackCount);
    //console.log(ontheGround);
    if (touchesDirection.left.isDown)
        {
            player.setVelocityX(-160);

            player.anims.play('runRight', true);
        }
    else if (touchesDirection.right.isDown)
    {
            player.setVelocityX(160);

            player.anims.play('runRight', true);
    }
        else
        {
            //player.setVelocityX(0);

            //player.anims.play('idle');
        }

    if (touchesDirection.up.isDown && player.body.touching.down && ontheGround === true)
        {
            player.setVelocityY(-330);
        }


    // if(this.input.keyboard.checkDown(touchesAction.D)){
    //     attackCount++
    //     if(attackCount == 0){attackNumberOne();}
    //     if(attackCount >= 3){attackCount = attackCount - attackCount}
    // }  
}
